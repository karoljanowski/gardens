// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  address       String
  city          String
  postalCode    String
  country       String
  email         String
  emailVerified Boolean
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       UserCourse[]
  lessonProgress UserLessonProgress[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String?
  items     Course[] @relation("CartItems")
}

model Course {
  id          String   @id @default(uuid())
  order       Int
  title       String
  subtitle    String
  description String
  image       String
  price       Int
  carts       Cart[]   @relation("CartItems")
  userCourses UserCourse[]
  modules     Module[]
}

model Module {
  id        String   @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(uuid())
  title     String
  duration  Int
  videoUrl  String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id])
  lessonProgress UserLessonProgress[]
}

model UserCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Int      @default(0)
  status    UserCourseStatus @default(IN_PROGRESS)
}

model UserLessonProgress {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  completed Boolean  @default(false)
}

enum UserCourseStatus {
  IN_PROGRESS
  COMPLETED
}